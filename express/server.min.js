const express=require("express"),mysql=require("mysql"),bodyParser=require("body-parser"),path=require("path"),app=express(),PORT=5e3;app.use(bodyParser.urlencoded({extended:!0})),app.use(express.json()),app.use(express.static(path.join(__dirname,"public"))),app.set("view engine","ejs"),app.set("views",path.join(__dirname,"views"));const db=mysql.createConnection({host:"localhost",user:"root",password:"",database:"express_log"});db.connect(e=>{if(e){console.error("Error connecting to MySQL:",e.message);return}console.log("Connected to MySQL")}),app.get("/agents",(e,r)=>{db.query("SELECT * FROM agents WHERE availability = 'Available'",(e,s)=>{if(e)return console.error("Error fetching agents:",e.message),r.status(500).send("Server Error");r.render("index",{agents:s})})}),app.get("/",(e,r)=>{db.query("SELECT * FROM request_logs ORDER BY timestamp DESC",(e,s)=>{if(e)return console.error("Error fetching logs:",e.message),r.status(500).send("Server Error");db.query("SELECT * FROM agents WHERE availability = 'Available'",(e,a)=>{if(e)return console.error("Error fetching agents:",e.message),r.status(500).send("Server Error");r.render("index",{logs:s,agents:a})})})}),app.get("/check-agent-assignment",(e,r)=>{let{agentName:s}=e.query;if(!s)return r.status(400).send("Agent name is required.");db.query("SELECT * FROM agents WHERE name = ? AND availability = 'Assigned'",[s],(e,a)=>e?(console.error("Error checking agent in agents table:",e.message),r.status(500).send("Server Error")):0===a.length?r.send("null"):void db.query("SELECT sender FROM request_logs WHERE agentName = ?",[s],(e,s)=>{if(e)return console.error("Error checking agent in request_logs:",e.message),r.status(500).send("Server Error");if(0===s.length)return r.send("null");let a=s[0].sender;r.send(a)}))}),app.get("/checkMessage",(e,r)=>{let{sender:s,message:a}=e.query;if(!s||!a)return r.status(400).send("Sender and message fields are required.");db.query("SELECT * FROM request_logs WHERE sender = ? AND message = ?",[s,a],(e,s)=>{if(e)return console.error("Error checking message:",e.message),r.status(500).send("Server Error");r.send(s.length>0?"found":"not found")})}),app.post("/log",(e,r)=>{let{sender:s,message:a}=e.body;if(!s||!a)return r.status(400).send("Sender and message fields are required.");db.query("SELECT * FROM request_logs WHERE sender = ? AND message = ?",[s,a],(e,t)=>e?(console.error("Error checking message:",e.message),r.status(500).send("Server Error")):t.length>0?r.send("Duplicate message detected, skipping log."):void db.query("INSERT INTO request_logs (sender, message) VALUES (?, ?)",[s,a],e=>{if(e)return console.error("Error logging request:",e.message),r.status(500).send("Server Error");r.send("Message logged successfully!")}))}),app.post("/assign-agent",(e,r)=>{console.log("Received request:",e.body);let{agentName:s,logId:a}=e.body;if(!s||!a)return console.log("Missing agentName or logId"),r.status(400).json({message:"Agent and log ID are required."});db.query("SELECT * FROM agents WHERE name = ? AND availability = 'Available'",[s],(e,t)=>e?(console.error("Error checking agent availability:",e.message),r.status(500).json({message:"Server Error"})):0===t.length?(console.log("Agent not available:",s),r.status(400).json({message:"Agent not available."})):void db.query("SELECT sender FROM request_logs WHERE logId = ?",[a],(e,t)=>{if(e)return console.error("Error fetching log details:",e.message),r.status(500).json({message:"Server Error"});if(0===t.length)return console.log("Log not found with id:",a),r.status(404).json({message:"Log not found."});let n=t[0].sender;db.query("UPDATE request_logs SET agentName = ? WHERE logId = ?",[s,a],e=>{if(e)return console.error("Error assigning agent:",e.message),r.status(500).json({message:"Server Error"});db.query("UPDATE agents SET availability = 'Assigned' WHERE name = ?",[s],e=>{if(e)return console.error("Error updating agent availability:",e.message),r.status(500).json({message:"Server Error"});r.json({message:"Agent assigned successfully!",phoneNumber:n})})})}))}),app.get("/update-agent-availability",(e,r)=>{let{agentName:s,availability:a}=e.query;if(!s||!a)return r.status(400).send("Agent name and availability are required.");db.query("UPDATE agents SET availability = ? WHERE name = ?",[a,s],(e,s)=>{if(e)return console.error("Error updating agent availability:",e.message),r.status(500).send("Server Error");r.send(s.affectedRows>0?"Agent availability updated successfully":"Agent not found")})}),app.listen(5e3,"0.0.0.0",()=>{console.log("Server running on http://0.0.0.0:5000")});